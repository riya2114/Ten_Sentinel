import { useState, useMemo } from 'react';
import React from "react";
import { motion } from 'framer-motion';
import { CubeIcon, AdjustmentsVerticalIcon, EyeSlashIcon } from '@heroicons/react/24/outline';

const pentestTypesData = [
  {
    id: 'white_box',
    icon: CubeIcon,
    title: 'White Box Testing',
    description: 'Also known as Clear Box testing, this approach grants penetration testers full administrative access to the cloud infrastructure, including configurations and source code. With complete visibility, the testers perform a detailed analysis to uncover internal and external vulnerabilities, misconfigurations, and weaknesses in the cloud architecture.',
    activeClasses: 'bg-blue-500 text-white ring-4 ring-blue-300 ring-offset-2',
    inactiveIconColor: 'text-blue-500',
    activeTextColor: 'text-blue-600',
    buttonText: 'White Box'
  },
  {
    id: 'gray_box',
    icon: AdjustmentsVerticalIcon,
    title: 'Gray Box Testing',
    description: 'In Gray Box testing, penetration testers are provided with limited knowledge of the cloud systems, such as partial access to user accounts or restricted administrative privileges. This simulates an attack from a semi-insider perspective, focusing on identifying vulnerabilities that could be exploited by someone with partial insider knowledge.',
    activeClasses: 'bg-blue-500 text-white ring-4 ring-blue-300 ring-offset-2',
    inactiveIconColor: 'text-gray-500',
    activeTextColor: 'text-gray-600',
    buttonText: 'Gray Box'
  },
  {
    id: 'black_box',
    icon: EyeSlashIcon,
    title: 'Black Box Testing',
    description: 'In this method, penetration testers have no prior information about the cloud infrastructure. They act as external attackers, attempting to exploit the system without any privileged insights. Black Box testing is designed to assess the cloud environment\'s perimeter defences and its ability to withstand unauthorized access from external threats.',
    activeClasses: 'bg-blue-500 text-white ring-4 ring-blue-300 ring-offset-2',
    inactiveIconColor: 'text-gray-800',
    activeTextColor: 'text-gray-900',
    buttonText: 'Black Box'
  },
];

const PenTestTypes = () => {
  const [activeType, setActiveType] = useState(pentestTypesData[1]);

  const buttonOrbitPositions = useMemo(() => {
    const radius = 40;
    const centerX = 50;
    const centerY = 50;
    const reorderedAngles = [-90, 150, 30]; // Top, Bottom-left, Bottom-right

    return pentestTypesData.map((_, index) => {
      const angleDeg = reorderedAngles[index % reorderedAngles.length];
      const angleRad = (angleDeg * Math.PI) / 180;
      const x = centerX + radius * Math.cos(angleRad);
      const y = centerY + radius * Math.sin(angleRad);
      return {
        top: `${y}%`,
        left: `${x}%`,
        transform: 'translate(-50%, -50%)',
      };
    });
  }, []);

  const textContentVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: (delay = 0) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay,
        duration: 0.6,
        ease: "easeOut",
      },
    }),
  };

  return (
    <div className="py-16 px-2 sm:px-4 lg:px-8 bg-gray-50 overflow-x-hidden">
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-x-12 gap-y-8 sm:gap-y-10 lg:gap-y-0 items-start lg:items-center">
        {/* Updated text alignment classes here */}
        <div className="lg:col-span-1 text-center md:text-center lg:text-left lg:flex lg:flex-col lg:justify-center break-words">
          <motion.h2
            className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 mb-3 sm:mb-4"
            variants={textContentVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            custom={0.1}
          >
            Types of Cloud Pentests We Provide
          </motion.h2>
          <motion.p
            className="text-base sm:text-lg text-gray-700"
            variants={textContentVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            custom={0.2}
          >
            At Ten Sentinel, we offer a comprehensive range of cloud penetration testing services designed to meet specific security assessment goals. Our testing approach is based on systematic planning and proven strategies that help uncover vulnerabilities, assess potential risks, and strengthen the overall security of your cloud environment. Every assessment is conducted with precision, ensuring that your cloud infrastructure remains resilient against evolving threats.
          </motion.p>
        </div>

        <div className="lg:col-span-2 break-words">
          {/* Layout for < md screens (Stacked Cards) */}
          <div className="space-y-4 sm:space-y-6 md:hidden">
            {pentestTypesData.map((type) => (
              <div key={type.id} className="bg-white p-3 sm:p-4 rounded-lg sm:rounded-xl shadow-md sm:shadow-lg">
                <div className="flex items-center mb-2 sm:mb-3">
                  <type.icon className={`
                    h-6 w-6
                    sm:h-8 sm:w-8
                    mr-2 sm:mr-3
                    flex-shrink-0
                    text-blue-600
                    `}
                  />
                  <div>
                    <h3 className={`
                      text-base
                      sm:text-lg
                      font-semibold
                      text-blue-700
                      `}>{type.title}
                    </h3>
                  </div>
                </div>
                <p className="text-gray-700
                  text-xs
                  sm:text-sm
                  leading-normal sm:leading-relaxed">
                  {type.description}
                </p>
              </div>
            ))}
          </div>

          {/* Layout for md+ screens (Orbit Diagram) */}
          <div
            className="hidden md:flex relative
                       md:min-h-[30rem]
                       lg:min-h-[32rem]
                       items-center justify-center"
          >
            <svg
              className="absolute inset-0 z-0"
              width="100%"
              height="100%"
              viewBox="0 0 100 100"
              preserveAspectRatio="none"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle
                cx="50"
                cy="50"
                r="40"
                stroke="rgba(192, 132, 252, 0.4)"
                strokeWidth="0.5"
              />
            </svg>

            {pentestTypesData.map((type, index) => (
              <button
                key={type.id}
                onClick={() => setActiveType(type)}
                style={buttonOrbitPositions[index]}
                className={`absolute p-3 rounded-full w-28 h-28
                  flex flex-col items-center justify-center text-center shadow-lg
                  transition-all duration-300 transform hover:scale-105
                  ${activeType.id === type.id ? type.activeClasses : `bg-gray-100 hover:bg-gray-200 text-gray-700`}
                  z-10
                `}
              >
                <type.icon className={`h-10 w-10 mb-2
                  ${activeType.id === type.id ? 'text-white' : type.inactiveIconColor}`} />
                <span className="text-sm font-semibold">{type.buttonText}</span>
              </button>
            ))}

            {activeType && (
              <div
                className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2
                           w-2/3 lg:w-1/2 max-w-md
                           text-center
                           z-5
                           pointer-events-none"
              >
                <h3 className={`text-xl md:text-2xl font-semibold mb-3 ${activeType.activeTextColor}`}>
                  {activeType.title}
                </h3>
                <p className="text-sm md:text-base text-gray-700 leading-relaxed">
                  {activeType.description}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PenTestTypes;